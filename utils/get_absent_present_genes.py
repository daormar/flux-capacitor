# Author: Daniel Ortiz Mart\'inez
# *- python -*

# import modules
import sys, getopt

# load_gene_dict
def load_gene_dict(filename):
    genedict={}
    file = open(filename, 'r')
    # read file line by line
    for line in file:
        line=line.strip("\n")
        fields=line.split(",")
        genedict[fields[0]]=fields[1]
    return genedict

# main
def main(argv):
    # take parameters
    d_given=False
    p_given=False
    dictf = ""
    panpf= ""
    try:
        opts, args = getopt.getopt(sys.argv[1:],"hd:p:",["dictf=","panpf="])
    except getopt.GetoptError:
        print >> sys.stderr, "get_absent_present_genes -d <string> -p <string>"
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print "get_absent_present_genes -d <string> -p <string>"
            print ""
            print "-d <string> :    file with eset gene ids to entrez ids"
            print "-p <string> :    file with data generated by panp R library"
            sys.exit()
        elif opt in ("-d", "--dictf"):
            dictf = arg
            d_given=True
        elif opt in ("-p", "--panpf"):
            panpf = arg
            p_given=True

    # print parameters
    if(d_given==True):
        print >> sys.stderr, "d is %s" % (dictf)
    else:
        print >> sys.stderr, "Error: -d option not given"
        sys.exit(2)

    if(p_given==True):
        print >> sys.stderr, "p is %s" % (panpf)
    else:
        print >> sys.stderr, "Error: -p option not given"
        sys.exit(2)

    # load gene dictionary
    genedict=load_gene_dict(dictf)

    # Process absent/present genes info
    file = open(panpf, 'r')
    # read file line by line
    lineno=0
    for line in file:
        if(lineno>1):
            line=line.strip("\n")
            fields=line.split(",")
            num_zeros=0
            num_ones=0
            for i in fields[2:]:
                if(i=="0"):
                    num_zeros=num_zeros+1
                elif(i=="1"):
                    num_ones=num_ones+1
            if(num_zeros>num_ones):
                print genedict[fields[0]]+",0"
            elif(num_ones>num_zeros):
                print genedict[fields[0]]+",1"                
            else:
                print genedict[fields[0]]+",NA"  
        lineno=lineno+1
    
if __name__ == "__main__":
    main(sys.argv)
